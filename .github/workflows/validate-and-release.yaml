name: Validate SKOS Vocabulary (and release if on main)

on:
  workflow_call:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v2
        with:
          path: vocab

      - name: Checkout workflow dependencies
        uses: actions/checkout@v2
        with:
          repository: openactive/skos-vocabulary-workflows
          path: workflow

      - name: Install Node.js 20.x
        uses: actions/setup-node@v3
        with:
          node-version: '20.x'

      - name: Install dependencies
        run: npm install @openactive/skos handlebars ajv
      - name: Validate activity-list.jsonld
        uses: actions/github-script@v7
        with:
          script: |
            const Ajv = require('ajv');
            const fs = require('fs');
            const Handlebars = require('handlebars');
            const skos = require('@openactive/skos');

            const vocabularyIdentifier = 'activity-list';

            var schemaHandlebarsTemplateFile = "./workflow/workflow-dependencies/schema/skos-vocabulary.schema.json.hbs";
            var skosFile = `./vocab/data/${vocabularyIdentifier}.jsonld`;

            const schemaHandlebarsTemplate = Handlebars.compile(fs.readFileSync(schemaHandlebarsTemplateFile, 'utf8'));
            
            const schema = JSON.parse(schemaHandlebarsTemplate({ 'VOCAB_IDENTIFIER': vocabularyIdentifier }));
            const data = JSON.parse(fs.readFileSync(skosFile, 'utf8'));

            var ajv = new Ajv({ allErrors: 'true', verbose: 'true' });

            var validate = ajv.compile(schema);
            var is_valid = validate(data);

            // Try to load into SKOS.js (will throw on failure)
            var scheme = new skos.ConceptScheme(data);

            /*
            if(is_valid){
              console.log(`${vocabularyIdentifier}.jsonld passed validation`);
            } else {
              const errorMessage = `${vocabularyIdentifier}.jsonld failed validation`
              console.log(`${errorMessage}\n=======\n`);
              console.log(validate.errors);
              throw new Error(errorMessage);
            }
            */

  release:
    needs: validate
    runs-on: ubuntu-latest
    if: ${{ !contains(toJSON(github.event.commits.*.message), '[no-release]') && github.ref == 'refs/heads/main' }}

    # Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
    # However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
    concurrency:
      group: "pages"
      cancel-in-progress: false

    # Deploy to the github-pages environment
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: Check out repository
        uses: actions/checkout@v2
        with:
          path: vocab

      - name: Checkout workflow dependencies
        uses: actions/checkout@v2
        with:
          repository: openactive/skos-vocabulary-workflows
          path: workflow

      - name: Read version from file
        id: timestamp
        run: |
          version=$(cat vocab/data/version.txt)
          echo "::set-output name=version::$version"
        
      - name: Render PR body
        id: fetch_pr
        uses: actions/github-script@v7
        with:
          result-encoding: string
          script: |
            const { data: pulls } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'closed',
              head: context.sha
            });
            const pr = pulls.find(pr => pr.merge_commit_sha === context.sha);
            if (pr) {
              return `${pr.body || ''}\n\nAssociated PR: #${pr.number}`;
            } else {
              console.log('No associated PR found; skipping release creation.');
              return '';
            }

      - name: Install dependencies
        run: npm install handlebars
        if: ${{ steps.fetch_pr.outputs.result != '' }}

      - name: Render redirect index.html to data folder for deployment
        uses: actions/github-script@v7
        if: ${{ steps.fetch_pr.outputs.result != '' }}
        with:
          script: |
            const fs = require('fs');
            const Handlebars = require('handlebars');

            // Vocabulary identifier is the repository name
            const vocabularyIdentifier = 'activity-list';

            // Extract Vocabulary Title from the source vocabulary file 
            const skosFile = `./vocab/data/${vocabularyIdentifier}.jsonld`;
            const data = JSON.parse(fs.readFileSync(skosFile, 'utf8'));
            const vocabularyTitle = data.title;

            // Render the index.html file
            const indexTemplateFile = "./workflow/workflow-dependencies/gh-pages/index.hbs";
            const indexHandlebarsTemplate = Handlebars.compile(fs.readFileSync(indexTemplateFile, 'utf8'));
            const indexHtml = indexHandlebarsTemplate({ 'VOCAB_IDENTIFIER': vocabularyIdentifier, 'VOCAB_TITLE': vocabularyTitle });
            
            // Write the index.html file
            const indexFileLocation = "./vocab/data/index.html";
            fs.writeFileSync(indexFileLocation, indexHtml);

      - name: Setup Pages
        if: ${{ steps.fetch_pr.outputs.result != ''}}
        uses: actions/configure-pages@v4

      - name: Upload artifact
        if: ${{ steps.fetch_pr.outputs.result != ''}}
        uses: actions/upload-pages-artifact@v3
        with:
          # Upload only /data/ directory
          path: './vocab/data/'

      - name: Deploy artifact to GitHub Pages
        if: ${{ steps.fetch_pr.outputs.result != ''}}
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Create Release
        if: ${{ steps.fetch_pr.outputs.result != '' }}
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.timestamp.outputs.version }}
          release_name: Release v${{ steps.timestamp.outputs.version }}
          body: ${{ steps.fetch_pr.outputs.result }}
          draft: false
          prerelease: false
